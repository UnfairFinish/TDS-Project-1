1. Top 5 users in Boston with the highest number of followers can be analyzed in the users.csv excel sheet

2. The 5 earliest registered GitHub users in Boston can be analyzed in the users.csv excel sheet

3. Code To find the most popular license

import csv
l1=[]
with open("repositories.csv","r") as f:
    next(f,None)
    l=f.readlines()
    d={}
    for i in l:
        a=i.split(',')
        if a[8]!="\n":
            if a[8] not in d:
                d[a[8]]=0
            d[a[8]]+=1
values=list(dict.values(d))
values.sort(reverse=True)
c=0
for i in range(3):
    for j in d:
        if d[j]==values[i]:
            l1.append(j)
            break
print(l1)

4. Code to find the most popular company

import csv
l1=[]
d={}
with open("users.csv","r", encoding="utf8") as f:
    next(f,None)
    l=f.readlines()
    for i in l:
        a=i.split(',')
        if len(a)>=3:
            #print(a[1])
            if a[2]!="":
                if a[2] not in d:
                    d[a[2]]=0
                d[a[2]]+=1
values=list(dict.values(d))
values.sort()
for i in d:
    if d[i]==values[-1]:
        print(i)

5. Code to find the most popular programming language

import csv
l1=[]
d={}
with open("repositories.csv","r") as f:
    next(f,None)
    l=f.readlines()
    for i in l:
        a=i.split(',')
        if a[5]!="":
            if a[5] not in d:
                d[a[5]]=0
            d[a[5]]+=1
values=list(dict.values(d))
values.sort()
for i in d:
    if d[i]==values[-1]:
        print(i)

6. Code to find the programming language which is the second most popular among users who joined after 2020

import csv
l1=[]
d={}
with open("repositories.csv","r") as f:
    next(f,None)
    l=f.readlines()
    for i in l:
        a=i.split(',')
        if a[5]!="" and a[2]>='2020':
            if a[5] not in d:
                d[a[5]]=0
            d[a[5]]+=1
values=list(dict.values(d))
values.sort()
for i in d:
    if d[i]==values[-2]:
        print(i)

7. Code to find the language which has the highest average number of stars per repository?

import csv
l1=[]
d={}
dn={}
with open("repositories.csv","r") as f:
    next(f,None)
    l=f.readlines()
    for i in l:
        a=i.split(',')
        if a[5]!="":
            if a[5] not in d:
                d[a[5]]=0
                dn[a[5]]=0
            dn[a[5]]+=1
            d[a[5]]+=int(a[3])
for i in d:
    for j in dn:
        if i==j:
            d[i]=d[i]/dn[j]
values=list(dict.values(d))
values.sort()
for i in d:
    if d[i]==values[-1]:
        print(i)

8. Code to find the top 5 in terms of leader_strength 

import pandas as pd
import datetime
import numpy as np
from scipy.stats import pearsonr
d={}
df=pd.read_csv("users.csv",usecols=['login','followers','following'])
df['leader_strength']=df['followers']/(1+df['following'])
print(df.sort_values(by='leader_strength',ascending=False))


9. Code to find yhe correlation between the number of followers and the number of public repositories among users in Boston 

import pandas as pd
import datetime
import numpy as np
from scipy.stats import pearsonr
d={}
df=pd.read_csv("users.csv",usecols=['followers','public_repos'])
corr,a=pearsonr(df['followers'],df['public_repos'])
print(corr)


10. Code to find the regression slope of followers on repos is analyzed in the users_analyzed.csv excel sheet

import pandas as pd
import datetime
import numpy as np
from scipy.stats import pearsonr
d={}
df=pd.read_csv("users.csv",usecols=['followers','public_repos'])
corr,a=pearsonr(df['followers'],df['public_repos'])
print(corr*np.std(df['followers'])/np.std(df['public_repos']))



11. Code to find the correlation between has_project and has_wiki

import pandas as pd
from scipy.stats import pearsonr
csv_file = 'repositories.csv'  
df = pd.read_csv(csv_file,usecols=['has_projects','has_wiki'])
df['has_projects'] = df['has_projects'].astype(int)
df['has_wiki'] = df['has_wiki'].astype(int)
corr,a=pearsonr(df['has_projects'],df['has_wiki'])
print(corr)


12. Code to find the average of following per user for hireable=true minus the average following for the rest

import pandas as pd
f1=0
n1=0
f2=0
n2=0
csv_file = 'users.csv'  
df = pd.read_csv(csv_file,usecols=['hireable','following'])
df['hireable'] = df['hireable'].astype(int)
for index,row in df.iterrows():
    if row['hireable']==1:
        n1+=1
        f1+=row['following']
    else:
        n2+=1
        f2+=row['following']
print(f1/n1-f2/n2)

13. Code to find Regression slope of followers on bio word count

import pandas as pd
from scipy.stats import pearsonr
import numpy as np
l=[]
users_csv_path="users.csv"
df = pd.read_csv(users_csv_path,usecols=['bio','followers'] )
df = df[df['bio'].notna() & (df['bio'] != '')]
df['bio']=df['bio'].str.split().str.len()
corr,a=pearsonr(df['bio'],df['followers'])
print(corr*np.std(df['followers'])/np.std(df['bio']))
   


14. Code to find the top 5 users who created the most repositories in weekend

import pandas as pd
import datetime
d={}
df=pd.read_csv("repositories.csv",usecols=['login','created_at'])
for index,row in df.iterrows():
    if row['login'] not in d:
        d[row['login']]=0
    date_str = row['created_at'][0:10]
    date_object = datetime.datetime.strptime(date_str, "%Y-%m-%d").date()
    day_name = date_object.strftime("%A")
    if (day_name=="Saturday" or day_name=="Sunday"):
        d[row['login']]+=1
values=list(dict.values(d))
values.sort(reverse=True)
for i in range(5):
    for j in d:
        if d[j]==values[i]:
            print(j,end=",")

15. Code to find fraction of users with email when hireable=true minus fraction of users with email for the rest

import pandas as pd
f1=0
n1=0
f2=0
n2=0
csv_file = 'users.csv'  
df = pd.read_csv(csv_file,usecols=['hireable','email'])
df['hireable'] = df['hireable'].astype(int)
for index,row in df.iterrows():
    if row['hireable']==1:
        n1+=1
        if type(row['email'])==type("a"):
            f1+=1
    else:
        n2+=1
        if type(row['email'])==type("a"):
            f2+=1
print(f1/n1-f2/n2)


16. Code to find the most common surname

import csv
d={}
with open("users.csv","r", encoding="utf8") as f:
    next(f,None)
    l=f.readlines()
    for i in l:
        a=i.split(',')
        if len(a)>=2:
            b=a[1].split()
            if (len(b)>=2):
                if b[1] not in d:
                    d[b[1]]=0
                d[b[1]]+=1
values=list(dict.values(d))
values.sort(reverse=True)
for i in d:
    if d[i]==values[0]:
        print(i)


